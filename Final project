Project Code Snippet:-

# Data Preprocessing (MovieLens)

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load datasets
movies = pd.read_csv('movies.csv')
ratings = pd.read_csv('ratings.csv')

# Content-Based Filtering - TFIDF on genres
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(movies['genres'].fillna(''))
cos_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Content-Based Recommendation Function

def content_recommend(movie_title, top_n=5):
    idx = movies[movies['title'] == movie_title].index[0]
    sim_scores = list(enumerate(cos_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    movie_indices = [i[0] for i in sim_scores[1:top_n+1]]
    return movies['title'].iloc[movie_indices]

print(content_recommend('Toy Story (1995)'))

# Collaborative Filtering (Using Surprise Library)

from surprise import Dataset, Reader, SVD
from surprise.model_selection import train_test_split

reader = Reader(rating_scale=(0.5, 5))
data = Dataset.load_from_df(ratings[['userId', 'movieId', 'rating']], reader)
trainset, testset = train_test_split(data, test_size=0.2)

model = SVD()
model.fit(trainset)
pred = model.test(testset)

# Collaborative Recommendation Function

def collab_recommend(user_id, top_n=5):
    movie_ids = ratings['movieId'].unique()
    predictions = [model.predict(user_id, movie_id) for movie_id in movie_ids]
    pred_ratings = sorted(predictions, key=lambda x: x.est, reverse=True)[:top_n]
    movie_titles = movies.set_index('movieId').loc[[pred.iid for pred in pred_ratings]]['title']
    return movie_titles.values

print(collab_recommend(1))

# Simple Streamlit UI (app.py)

import streamlit as st

st.title('ðŸŽ¬ Movie Recommendation System')
option = st.selectbox('Select a Movie:', movies['title'].values)

if st.button('Recommend (Content-Based)'):
    result = content_recommend(option)
    st.write("Top 5 similar movies:")
    for movie in result:
        st.write(movie)

user_id = st.number_input('Enter User ID for Collaborative Filtering:', min_value=1, step=1)
if st.button('Recommend (Collaborative)'):
    result = collab_recommend(int(user_id))
    st.write("Top 5 movie predictions:")
    for movie in result:
        st.write(movie)

Output:-

# Top 5 Recommendations:-

['A Bug\'s Life (1995)', 'Monsters, Inc. (2001)', 'Finding Nemo (2003)', 'Shrek (2001)', 'Ice Age (2002)']
